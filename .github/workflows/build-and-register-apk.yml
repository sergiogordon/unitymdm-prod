name: Build and Register Debug APK

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Grant execute permission for gradlew
        run: chmod +x android/gradlew
      
      - name: Build debug APK
        working-directory: android
        run: ./gradlew assembleDebug --stacktrace
      
      - name: Get APK metadata
        id: apk_metadata
        run: |
          # Find the APK
          APK_PATH=$(find android/app/build/outputs/apk/debug -name "*.apk" | head -n 1)
          echo "APK_PATH=$APK_PATH" >> $GITHUB_OUTPUT
          echo "Found APK at: $APK_PATH"
          
          # Extract version info from APK filename and build output
          # The build.gradle uses dynamic versioning: "1.0.${versionCode}-${gitSha}"
          APK_FILENAME=$(basename "$APK_PATH")
          echo "APK filename: $APK_FILENAME"
          
          # Version name is embedded in the APK via aapt
          VERSION_NAME=$(aapt dump badging "$APK_PATH" | grep "versionName" | sed "s/.*versionName='\([^']*\)'.*/\1/")
          VERSION_CODE=$(aapt dump badging "$APK_PATH" | grep "versionCode" | sed "s/.*versionCode='\([^']*\)'.*/\1/")
          
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION_NAME ($VERSION_CODE)"
          
          # Calculate file size
          FILE_SIZE=$(stat -c%s "$APK_PATH")
          echo "FILE_SIZE=$FILE_SIZE" >> $GITHUB_OUTPUT
          echo "File size: $FILE_SIZE bytes"
          
          # Calculate SHA256
          SHA256=$(sha256sum "$APK_PATH" | awk '{print $1}')
          echo "SHA256=$SHA256" >> $GITHUB_OUTPUT
          echo "SHA256: $SHA256"
          
          # Get signer fingerprint from debug keystore
          # Extract the SHA256 fingerprint of the debug signing certificate
          SIGNER_FP=$(keytool -list -v -keystore ~/.android/debug.keystore -storepass android -alias androiddebugkey 2>/dev/null | grep "SHA256:" | awk '{print $2}' || echo "DEBUG_KEY")
          echo "SIGNER_FINGERPRINT=$SIGNER_FP" >> $GITHUB_OUTPUT
          echo "Signer fingerprint: $SIGNER_FP"
      
      - name: Check backend connectivity
        env:
          BACKEND_URL: ${{ secrets.NEXMDM_BACKEND_URL }}
        run: |
          echo "üîç Testing backend connectivity..."
          echo "Backend URL: $BACKEND_URL"
          
          # Test if backend is reachable
          if curl -f -s -o /dev/null -w "%{http_code}" "$BACKEND_URL" > /dev/null 2>&1; then
            echo "‚úÖ Backend is reachable"
          else
            echo "‚ö†Ô∏è  Backend might not be reachable, but continuing..."
          fi
          
          # Test admin endpoint specifically
          echo "Testing admin endpoint: $BACKEND_URL/admin/apk/builds"
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$BACKEND_URL/admin/apk/builds" || echo "FAILED")
          echo "Admin endpoint status: $STATUS"
      
      - name: Register build with NexMDM backend
        env:
          BACKEND_URL: ${{ secrets.NEXMDM_BACKEND_URL }}
          ADMIN_KEY: ${{ secrets.NEXMDM_ADMIN_KEY }}
        run: |
          # Verify secrets are set
          if [ -z "$BACKEND_URL" ]; then
            echo "‚ùå ERROR: NEXMDM_BACKEND_URL secret is not set!"
            exit 1
          fi
          
          if [ -z "$ADMIN_KEY" ]; then
            echo "‚ùå ERROR: NEXMDM_ADMIN_KEY secret is not set!"
            exit 1
          fi
          
          # Generate unique build_id from CI metadata
          BUILD_ID="gh_${{ github.run_id }}_${{ github.run_number }}"
          
          # Note: storage_url is a placeholder for now
          # APKs are uploaded as GitHub artifacts and can be downloaded from there
          # In production, you would upload to S3/GCS and use that URL
          STORAGE_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          echo "================================================"
          echo "üöÄ Registering APK build with backend"
          echo "================================================"
          echo "Build ID: $BUILD_ID"
          echo "Backend URL: $BACKEND_URL"
          echo "Version: ${{ steps.apk_metadata.outputs.VERSION_NAME }} (code: ${{ steps.apk_metadata.outputs.VERSION_CODE }})"
          echo "File size: ${{ steps.apk_metadata.outputs.FILE_SIZE }} bytes"
          echo "SHA256: ${{ steps.apk_metadata.outputs.SHA256 }}"
          echo "================================================"
          
          # Create JSON payload
          PAYLOAD=$(cat <<EOF
          {
            "build_id": "$BUILD_ID",
            "version_code": ${{ steps.apk_metadata.outputs.VERSION_CODE }},
            "version_name": "${{ steps.apk_metadata.outputs.VERSION_NAME }}",
            "build_type": "debug",
            "file_size_bytes": ${{ steps.apk_metadata.outputs.FILE_SIZE }},
            "sha256": "${{ steps.apk_metadata.outputs.SHA256 }}",
            "signer_fingerprint": "${{ steps.apk_metadata.outputs.SIGNER_FINGERPRINT }}",
            "storage_url": "$STORAGE_URL",
            "ci_run_id": "${{ github.run_id }}",
            "git_sha": "${{ github.sha }}",
            "package_name": "com.nexmdm"
          }
          EOF
          )
          
          echo "üì§ Sending request..."
          echo "Endpoint: $BACKEND_URL/admin/apk/register"
          
          # Make the request with verbose output
          HTTP_CODE=$(curl -v -X POST "$BACKEND_URL/admin/apk/register" \
            -H "X-Admin: $ADMIN_KEY" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            -w "\n%{http_code}" \
            -o /tmp/response_body.txt \
            2>&1 | tee /tmp/curl_verbose.txt | tail -n1)
          
          # Show verbose curl output (with auth redacted)
          echo ""
          echo "üìã Curl verbose output:"
          cat /tmp/curl_verbose.txt | grep -v "X-Admin:" || true
          
          # Get response body
          RESPONSE_BODY=$(cat /tmp/response_body.txt 2>/dev/null || echo "No response body")
          
          echo ""
          echo "üì• Response received:"
          echo "HTTP Status: $HTTP_CODE"
          echo "Response Body: $RESPONSE_BODY"
          
          # Validate response
          if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "201" ]; then
            echo ""
            echo "‚úÖ SUCCESS: APK build registered with backend!"
            echo "Build can be viewed at: $BACKEND_URL/apk-management"
          else
            echo ""
            echo "‚ùå FAILED: Registration returned HTTP $HTTP_CODE"
            echo "Response: $RESPONSE_BODY"
            echo ""
            echo "Troubleshooting:"
            echo "1. Check that backend is running: $BACKEND_URL"
            echo "2. Verify ADMIN_KEY is correct"
            echo "3. Check backend logs for errors"
            exit 1
          fi
      
      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: nexmdm-debug-${{ steps.apk_metadata.outputs.VERSION_NAME }}-${{ github.sha }}
          path: ${{ steps.apk_metadata.outputs.APK_PATH }}
          retention-days: 30

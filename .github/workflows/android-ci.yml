name: Android Agent CI

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  GRADLE_VERSION: 'wrapper'

jobs:
  build:
    name: Build & Sign Android Agent
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x UNITYmdm/android/gradlew

      - name: Decode and prepare keystore
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo "Decoding keystore from GitHub Secrets..."
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > ${{ github.workspace }}/release.keystore
          ls -lh ${{ github.workspace }}/release.keystore
          echo "Keystore prepared successfully"

      - name: Set versioning metadata
        id: version
        run: |
          # Calculate version code from GitHub run number
          VERSION_CODE=$((GITHUB_RUN_NUMBER + 100))
          
          # Determine version name based on tag or commit
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            VERSION_NAME="${GITHUB_REF#refs/tags/}"
          else
            COMMIT_SHORT="${GITHUB_SHA:0:7}"
            VERSION_NAME="1.0.${VERSION_CODE}-${COMMIT_SHORT}"
          fi
          
          echo "version_code=${VERSION_CODE}" >> $GITHUB_OUTPUT
          echo "version_name=${VERSION_NAME}" >> $GITHUB_OUTPUT
          echo "commit_short=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
          echo "build_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT
          
          echo "📦 Version Code: ${VERSION_CODE}"
          echo "📦 Version Name: ${VERSION_NAME}"
          echo "📦 Commit: ${GITHUB_SHA:0:7}"

      - name: Build Debug APK
        working-directory: UNITYmdm/android
        env:
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_SHA: ${{ github.sha }}
          KEYSTORE_FILE: ${{ github.workspace }}/release.keystore
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_ALIAS_PASSWORD }}
        run: |
          echo "Building debug APK with release signing..."
          ./gradlew assembleDebug --no-daemon --stacktrace
          
          # Find the built APK
          DEBUG_APK=$(find app/build/outputs/apk/debug -name "*.apk" | head -1)
          echo "DEBUG_APK_PATH=${DEBUG_APK}" >> $GITHUB_ENV
          
          if [ -f "$DEBUG_APK" ]; then
            ls -lh "$DEBUG_APK"
            echo "✅ Debug APK built successfully: $DEBUG_APK"
          else
            echo "❌ Debug APK not found!"
            exit 1
          fi

      - name: Build Release APK and AAB
        working-directory: UNITYmdm/android
        env:
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_SHA: ${{ github.sha }}
          KEYSTORE_FILE: ${{ github.workspace }}/release.keystore
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_ALIAS_PASSWORD }}
        run: |
          echo "Building release APK and AAB..."
          ./gradlew assembleRelease bundleRelease --no-daemon --stacktrace
          
          # Find the built artifacts
          RELEASE_APK=$(find app/build/outputs/apk/release -name "*.apk" | head -1)
          RELEASE_AAB=$(find app/build/outputs/bundle/release -name "*.aab" | head -1)
          
          echo "RELEASE_APK_PATH=${RELEASE_APK}" >> $GITHUB_ENV
          echo "RELEASE_AAB_PATH=${RELEASE_AAB}" >> $GITHUB_ENV
          
          if [ -f "$RELEASE_APK" ]; then
            ls -lh "$RELEASE_APK"
            echo "✅ Release APK built successfully: $RELEASE_APK"
          else
            echo "❌ Release APK not found!"
            exit 1
          fi
          
          if [ -f "$RELEASE_AAB" ]; then
            ls -lh "$RELEASE_AAB"
            echo "✅ Release AAB built successfully: $RELEASE_AAB"
          else
            echo "⚠️ Release AAB not found (optional)"
          fi

      - name: Verify APK signatures
        working-directory: UNITYmdm/android
        run: |
          echo "Verifying APK signatures with apksigner..."
          
          # Install build tools if needed
          echo "Installing Android SDK build tools..."
          sdkmanager "build-tools;34.0.0" > /dev/null 2>&1 || true
          
          APKSIGNER="${ANDROID_HOME}/build-tools/34.0.0/apksigner"
          
          # Verify debug APK
          echo "Verifying debug APK..."
          $APKSIGNER verify --verbose "$DEBUG_APK_PATH" > debug_verify.txt 2>&1
          cat debug_verify.txt
          
          if $APKSIGNER verify "$DEBUG_APK_PATH" 2>&1 | grep -q "Verifies"; then
            echo "✅ Debug APK signature verified"
          else
            echo "❌ Debug APK signature verification failed!"
            exit 1
          fi
          
          # Verify release APK
          echo "Verifying release APK..."
          $APKSIGNER verify --verbose "$RELEASE_APK_PATH" > release_verify.txt 2>&1
          cat release_verify.txt
          
          if $APKSIGNER verify "$RELEASE_APK_PATH" 2>&1 | grep -q "Verifies"; then
            echo "✅ Release APK signature verified"
          else
            echo "❌ Release APK signature verification failed!"
            exit 1
          fi

      - name: Calculate checksums
        id: checksums
        working-directory: UNITYmdm/android
        run: |
          # Calculate SHA256 checksums
          DEBUG_SHA256=$(sha256sum "$DEBUG_APK_PATH" | awk '{print $1}')
          RELEASE_APK_SHA256=$(sha256sum "$RELEASE_APK_PATH" | awk '{print $1}')
          
          echo "debug_sha256=${DEBUG_SHA256}" >> $GITHUB_OUTPUT
          echo "release_apk_sha256=${RELEASE_APK_SHA256}" >> $GITHUB_OUTPUT
          
          echo "📋 Debug APK SHA256: ${DEBUG_SHA256}"
          echo "📋 Release APK SHA256: ${RELEASE_APK_SHA256}"
          
          if [ -f "$RELEASE_AAB_PATH" ]; then
            RELEASE_AAB_SHA256=$(sha256sum "$RELEASE_AAB_PATH" | awk '{print $1}')
            echo "release_aab_sha256=${RELEASE_AAB_SHA256}" >> $GITHUB_OUTPUT
            echo "📋 Release AAB SHA256: ${RELEASE_AAB_SHA256}"
          fi

      - name: Upload debug APK to backend
        working-directory: UNITYmdm/android
        env:
          BACKEND_URL: ${{ secrets.BACKEND_URL || 'https://your-backend-url.replit.dev' }}
          ADMIN_API_KEY: ${{ secrets.ADMIN_KEY }}
        run: |
          echo "Uploading debug APK to backend APK Management system..."
          
          # Extract APK metadata
          PACKAGE_NAME="com.nexmdm"
          VERSION_CODE="${{ steps.version.outputs.version_code }}"
          VERSION_NAME="${{ steps.version.outputs.version_name }}"
          
          # Prepare multipart form data upload
          RESPONSE=$(curl -X POST "${BACKEND_URL}/v1/apk/upload" \
            -H "X-Admin-Key: ${ADMIN_API_KEY}" \
            -F "file=@${DEBUG_APK_PATH}" \
            -F "package_name=${PACKAGE_NAME}" \
            -F "version_name=${VERSION_NAME}" \
            -F "version_code=${VERSION_CODE}" \
            -F "notes=Auto-built by CI from commit ${{ steps.version.outputs.commit_short }} | Build #${{ github.run_number }} | Built at ${{ steps.version.outputs.build_time }}" \
            -w "\nHTTP_CODE:%{http_code}" \
            -s)
          
          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
          
          echo "Backend response: ${BODY}"
          echo "HTTP status code: ${HTTP_CODE}"
          
          if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "201" ]; then
            echo "✅ Debug APK uploaded successfully to backend"
          else
            echo "⚠️ Failed to upload debug APK to backend (HTTP ${HTTP_CODE})"
            echo "This is non-critical - continuing workflow"
          fi

      - name: Upload Release APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: nexmdm-release-apk-${{ steps.version.outputs.version_code }}
          path: UNITYmdm/android/${{ env.RELEASE_APK_PATH }}
          retention-days: 90

      - name: Upload Release AAB as artifact
        if: env.RELEASE_AAB_PATH != ''
        uses: actions/upload-artifact@v4
        with:
          name: nexmdm-release-aab-${{ steps.version.outputs.version_code }}
          path: UNITYmdm/android/${{ env.RELEASE_AAB_PATH }}
          retention-days: 90

      - name: Upload Debug APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: nexmdm-debug-apk-${{ steps.version.outputs.version_code }}
          path: UNITYmdm/android/${{ env.DEBUG_APK_PATH }}
          retention-days: 30

      - name: Generate build summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🤖 Android Agent Build Summary
          
          ### 📦 Build Information
          - **Version Code**: ${{ steps.version.outputs.version_code }}
          - **Version Name**: ${{ steps.version.outputs.version_name }}
          - **Commit**: ${{ steps.version.outputs.commit_short }}
          - **Build Time**: ${{ steps.version.outputs.build_time }}
          - **Workflow Run**: #${{ github.run_number }}
          
          ### ✅ Artifacts Built
          
          #### Debug APK
          - **Path**: \`${DEBUG_APK_PATH}\`
          - **SHA256**: \`${{ steps.checksums.outputs.debug_sha256 }}\`
          - **Signature**: Verified ✅
          - **Backend Upload**: Completed
          
          #### Release APK
          - **Path**: \`${RELEASE_APK_PATH}\`
          - **SHA256**: \`${{ steps.checksums.outputs.release_apk_sha256 }}\`
          - **Signature**: Verified ✅
          
          #### Release AAB
          - **Path**: \`${RELEASE_AAB_PATH:-Not built}\`
          - **SHA256**: \`${{ steps.checksums.outputs.release_aab_sha256 || 'N/A' }}\`
          
          ### 🔐 Security
          - All APKs signed with release keystore
          - Signatures verified with apksigner
          - Debug APK uploaded to internal APK Management system
          
          ### 📥 Download Artifacts
          - Debug APK available in run artifacts (30 days retention)
          - Release APK/AAB available in run artifacts (90 days retention)
          EOF
          
          echo "📊 Build summary generated successfully"

      - name: Clean up keystore
        if: always()
        run: |
          if [ -f "${{ github.workspace }}/release.keystore" ]; then
            rm -f "${{ github.workspace }}/release.keystore"
            echo "🧹 Keystore cleaned up"
          fi

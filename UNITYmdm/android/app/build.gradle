plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services'
    id 'kotlin-kapt'
}

// Calculate version code ONCE at configuration time
def calculateVersionCode() {
    println "üîç APK Versioning: Starting version code calculation..."
    
    // Try GitHub Actions run number FIRST (most reliable in CI)
    def githubRunNumber = System.getenv("GITHUB_RUN_NUMBER")
    println "üîç GITHUB_RUN_NUMBER env var: '${githubRunNumber}'"
    if (githubRunNumber != null && !githubRunNumber.isEmpty()) {
        try {
            def runNumber = Integer.parseInt(githubRunNumber.trim()) + 100
            println "‚úÖ SUCCESS: Using GitHub run number: ${runNumber}"
            return runNumber
        } catch (NumberFormatException e) {
            println "‚ö† Warning: Could not parse GITHUB_RUN_NUMBER: ${githubRunNumber}"
        }
    }
    
    // Try git commit count as fallback
    try {
        def stdout = new ByteArrayOutputStream()
        def execResult = exec {
            commandLine 'git', '-C', '..', 'rev-list', '--count', 'HEAD'
            standardOutput = stdout
            ignoreExitValue = true
        }
        
        if (execResult.exitValue == 0) {
            def count = stdout.toString().trim()
            println "üîç Git output: '${count}'"
            if (count.matches("^\\d+\$")) {
                def gitCount = Integer.parseInt(count) + 100
                println "‚úÖ SUCCESS: Using git commit count: ${gitCount}"
                return gitCount
            }
        }
        println "‚ö† Git command failed with exit code: ${execResult.exitValue}"
    } catch (Exception e) {
        println "‚ö† Warning: Git version count failed: ${e.message}"
    }
    
    // Absolute fallback - use timestamp-based version (ALWAYS works)
    def timestamp = (System.currentTimeMillis() / 1000).intValue()
    def versionCode = (timestamp % 100000) + 10000
    println "‚ö† FALLBACK: Using timestamp-based version code: ${versionCode}"
    return versionCode
}

// Calculate once and cache the result
def appVersionCode = calculateVersionCode()
def appVersionName = "1.0.${appVersionCode}-" + ((System.getenv("GITHUB_SHA") ?: "dev").take(7))

android {
    namespace 'com.nexmdm'
    compileSdk 34

    defaultConfig {
        applicationId "com.nexmdm"
        minSdk 33
        targetSdk 34
        
        versionCode appVersionCode
        versionName appVersionName
        
        buildConfigField "String", "VERSION_NAME", "\"${appVersionName}\""
        buildConfigField "int", "VERSION_CODE", "${appVersionCode}"
    }

    signingConfigs {
        release {
            // Read from environment variables (set by GitHub Actions)
            def keystoreFile = System.getenv("KEYSTORE_FILE")
            if (keystoreFile != null && new File(keystoreFile).exists()) {
                storeFile file(keystoreFile)
                storePassword System.getenv("KEYSTORE_PASSWORD")
                keyAlias System.getenv("KEY_ALIAS")
                keyPassword System.getenv("KEY_PASSWORD")
                println "‚úÖ Release signing configured with keystore: ${keystoreFile}"
            } else {
                def inCI = System.getenv("GITHUB_ACTIONS") != null
                if (inCI) {
                    throw new GradleException("‚ùå FATAL: Release keystore not found in CI! All APKs MUST be signed for consistent upgrades.")
                } else {
                    println "‚ö† No release keystore found, using debug signing (local development only)"
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            // ALWAYS use release signing for debug builds (CI requires consistent signatures)
            signingConfig signingConfigs.release
            println "‚úÖ Debug build configured with release signing"
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    
    kotlinOptions {
        jvmTarget = '17'
    }
    
    buildFeatures {
        viewBinding true
        buildConfig true
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'
    implementation 'androidx.lifecycle:lifecycle-service:2.6.1'
    
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'
    
    implementation platform('com.google.firebase:firebase-bom:32.7.0')
    implementation 'com.google.firebase:firebase-messaging-ktx'
    
    // Room for persistent queue
    def room_version = "2.6.1"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
}

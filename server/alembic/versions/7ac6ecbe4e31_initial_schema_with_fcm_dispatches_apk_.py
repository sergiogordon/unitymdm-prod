"""Initial schema with fcm_dispatches, apk_download_events, device_heartbeats

Revision ID: 7ac6ecbe4e31
Revises: 
Create Date: 2025-10-18 13:35:56.975334

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7ac6ecbe4e31'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create new tables
    op.create_table('fcm_dispatches',
        sa.Column('request_id', sa.String(), nullable=False),
        sa.Column('device_id', sa.String(), nullable=False),
        sa.Column('action', sa.String(), nullable=False),
        sa.Column('payload_hash', sa.String(), nullable=True),
        sa.Column('sent_at', sa.DateTime(), nullable=False),
        sa.Column('latency_ms', sa.Integer(), nullable=True),
        sa.Column('fcm_message_id', sa.String(), nullable=True),
        sa.Column('http_code', sa.Integer(), nullable=True),
        sa.Column('fcm_status', sa.String(), nullable=False),
        sa.Column('error_msg', sa.Text(), nullable=True),
        sa.Column('response_json', sa.Text(), nullable=True),
        sa.Column('retries', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['device_id'], ['devices.id'], ),
        sa.PrimaryKeyConstraint('request_id')
    )
    op.create_index('idx_fcm_device_sent', 'fcm_dispatches', ['device_id', 'sent_at'], unique=False)
    op.create_index('idx_fcm_action_sent', 'fcm_dispatches', ['action', 'sent_at'], unique=False)
    op.create_index(op.f('ix_fcm_dispatches_device_id'), 'fcm_dispatches', ['device_id'], unique=False)
    op.create_index(op.f('ix_fcm_dispatches_fcm_message_id'), 'fcm_dispatches', ['fcm_message_id'], unique=False)
    op.create_index(op.f('ix_fcm_dispatches_sent_at'), 'fcm_dispatches', ['sent_at'], unique=False)
    
    op.create_table('apk_download_events',
        sa.Column('event_id', sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column('build_id', sa.Integer(), nullable=False),
        sa.Column('source', sa.String(), nullable=False),
        sa.Column('token_id', sa.String(), nullable=True),
        sa.Column('admin_user', sa.String(), nullable=True),
        sa.Column('ip', sa.String(), nullable=True),
        sa.Column('ts', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['build_id'], ['apk_versions.id'], ),
        sa.PrimaryKeyConstraint('event_id')
    )
    op.create_index('idx_apk_download_build_ts', 'apk_download_events', ['build_id', 'ts'], unique=False)
    op.create_index('idx_apk_download_token_ts', 'apk_download_events', ['token_id', 'ts'], unique=False)
    op.create_index(op.f('ix_apk_download_events_build_id'), 'apk_download_events', ['build_id'], unique=False)
    op.create_index(op.f('ix_apk_download_events_token_id'), 'apk_download_events', ['token_id'], unique=False)
    op.create_index(op.f('ix_apk_download_events_ts'), 'apk_download_events', ['ts'], unique=False)
    
    op.create_table('device_heartbeats',
        sa.Column('hb_id', sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column('device_id', sa.String(), nullable=False),
        sa.Column('ts', sa.DateTime(), nullable=False),
        sa.Column('ip', sa.String(), nullable=True),
        sa.Column('status', sa.String(), nullable=False),
        sa.Column('battery_pct', sa.Integer(), nullable=True),
        sa.Column('plugged', sa.Boolean(), nullable=True),
        sa.Column('temp_c', sa.Integer(), nullable=True),
        sa.Column('network_type', sa.String(), nullable=True),
        sa.Column('signal_dbm', sa.Integer(), nullable=True),
        sa.Column('uptime_s', sa.Integer(), nullable=True),
        sa.Column('ram_used_mb', sa.Integer(), nullable=True),
        sa.Column('unity_pkg_version', sa.String(), nullable=True),
        sa.Column('unity_running', sa.Boolean(), nullable=True),
        sa.Column('agent_version', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['device_id'], ['devices.id'], ),
        sa.PrimaryKeyConstraint('hb_id')
    )
    op.create_index('idx_heartbeat_device_ts', 'device_heartbeats', ['device_id', 'ts'], unique=False)
    op.create_index(op.f('ix_device_heartbeats_device_id'), 'device_heartbeats', ['device_id'], unique=False)
    op.create_index(op.f('ix_device_heartbeats_ts'), 'device_heartbeats', ['ts'], unique=False)
    
    op.drop_index('idx_session_token_cleanup', table_name='session_tokens')
    op.drop_index('idx_session_token_lookup', table_name='session_tokens')
    op.drop_index('ix_session_tokens_token_jti', table_name='session_tokens')
    op.drop_table('session_tokens')
    op.add_column('apk_installations', sa.Column('apk_version_id', sa.Integer(), nullable=False))
    op.add_column('apk_installations', sa.Column('initiated_at', sa.DateTime(), nullable=False))
    op.add_column('apk_installations', sa.Column('download_progress', sa.Integer(), nullable=True))
    op.add_column('apk_installations', sa.Column('initiated_by', sa.String(), nullable=True))
    op.alter_column('apk_installations', 'completed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_index('idx_apk_installation_device', table_name='apk_installations')
    op.drop_index('idx_apk_installation_status', table_name='apk_installations')
    op.drop_constraint('uq_device_apk', 'apk_installations', type_='unique')
    op.create_index('idx_installation_status', 'apk_installations', ['device_id', 'status'], unique=False)
    op.create_index('idx_installation_time', 'apk_installations', ['initiated_at'], unique=False)
    op.create_index('idx_installation_version_status', 'apk_installations', ['apk_version_id', 'status'], unique=False)
    op.create_index(op.f('ix_apk_installations_device_id'), 'apk_installations', ['device_id'], unique=False)
    op.drop_constraint('apk_installations_device_id_fkey', 'apk_installations', type_='foreignkey')
    op.drop_constraint('apk_installations_apk_id_fkey', 'apk_installations', type_='foreignkey')
    op.create_foreign_key(None, 'apk_installations', 'devices', ['device_id'], ['id'])
    op.create_foreign_key(None, 'apk_installations', 'apk_versions', ['apk_version_id'], ['id'])
    op.drop_column('apk_installations', 'retry_count')
    op.drop_column('apk_installations', 'apk_id')
    op.drop_column('apk_installations', 'requested_at')
    op.drop_column('apk_installations', 'started_at')
    op.add_column('apk_versions', sa.Column('package_name', sa.String(), nullable=False))
    op.add_column('apk_versions', sa.Column('notes', sa.Text(), nullable=True))
    op.add_column('apk_versions', sa.Column('build_type', sa.String(), nullable=True))
    op.add_column('apk_versions', sa.Column('ci_run_id', sa.String(), nullable=True))
    op.add_column('apk_versions', sa.Column('git_sha', sa.String(), nullable=True))
    op.add_column('apk_versions', sa.Column('signer_fingerprint', sa.String(), nullable=True))
    op.add_column('apk_versions', sa.Column('storage_url', sa.Text(), nullable=True))
    op.alter_column('apk_versions', 'uploaded_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.drop_index('idx_apk_version_active', table_name='apk_versions')
    op.drop_constraint('uq_apk_version_code', 'apk_versions', type_='unique')
    op.create_index('idx_apk_build_type', 'apk_versions', ['version_code', 'build_type'], unique=False)
    op.create_index('idx_apk_version_lookup', 'apk_versions', ['package_name', 'version_code'], unique=False)
    op.create_unique_constraint('uq_package_version', 'apk_versions', ['package_name', 'version_code'])
    op.drop_column('apk_versions', 'min_sdk')
    op.drop_column('apk_versions', 'file_hash')
    op.drop_column('apk_versions', 'target_sdk')
    op.drop_column('apk_versions', 'release_notes')
    op.add_column('battery_whitelist', sa.Column('app_name', sa.String(), nullable=False))
    op.add_column('battery_whitelist', sa.Column('enabled', sa.Boolean(), nullable=False))
    op.alter_column('battery_whitelist', 'added_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.drop_index('idx_battery_whitelist_package', table_name='battery_whitelist')
    op.create_index('idx_whitelist_enabled', 'battery_whitelist', ['enabled'], unique=False)
    op.drop_column('battery_whitelist', 'display_name')
    op.drop_column('battery_whitelist', 'is_system')
    op.alter_column('commands', 'parameters',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('commands', 'result',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('commands', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('commands', 'completed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_index('idx_command_device_status', table_name='commands')
    op.drop_index('idx_command_pending', table_name='commands')
    op.drop_index('idx_command_request_lookup', table_name='commands')
    op.drop_index('ix_commands_created_at', table_name='commands')
    op.create_index('idx_command_created', 'commands', ['created_at'], unique=False)
    op.create_index('idx_command_status', 'commands', ['device_id', 'status'], unique=False)
    op.drop_constraint('commands_device_id_fkey', 'commands', type_='foreignkey')
    op.create_foreign_key(None, 'commands', 'devices', ['device_id'], ['id'])
    op.drop_column('commands', 'fcm_response_code')
    op.drop_column('commands', 'initiated_by')
    op.drop_column('commands', 'fcm_response_body')
    op.drop_column('commands', 'fcm_sent_at')
    op.alter_column('device_events', 'timestamp',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('device_events', 'details',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_index('idx_device_event_cleanup', table_name='device_events')
    op.drop_index('idx_device_event_type_time', table_name='device_events')
    op.drop_index('ix_device_events_event_type', table_name='device_events')
    op.drop_constraint('device_events_device_id_fkey', 'device_events', type_='foreignkey')
    op.drop_column('device_events', 'severity')
    op.alter_column('devices', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('devices', 'last_seen',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('devices', 'last_status',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('devices', 'last_ping_sent',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('devices', 'last_ping_response',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('devices', 'clipboard_updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_index('idx_device_monitoring', table_name='devices')
    op.drop_index('ix_devices_alias', table_name='devices')
    op.drop_index('idx_device_status_query', table_name='devices')
    op.create_index('idx_device_status_query', 'devices', ['last_seen'], unique=False)
    op.drop_column('devices', 'battery_level')
    op.drop_column('devices', 'battery_charging')
    op.drop_column('devices', 'memory_available_mb')
    op.drop_column('devices', 'network_type')
    op.drop_column('devices', 'memory_total_mb')
    op.add_column('enrollment_tokens', sa.Column('scope', sa.String(), nullable=False, server_default='register'))
    op.add_column('enrollment_tokens', sa.Column('last_used_at', sa.DateTime(), nullable=True))
    op.alter_column('enrollment_tokens', 'issued_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('enrollment_tokens', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('enrollment_tokens', 'used_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_constraint('enrollment_tokens_token_id_key', 'enrollment_tokens', type_='unique')
    op.drop_index('ix_enrollment_tokens_token_id', table_name='enrollment_tokens')
    op.create_index(op.f('ix_enrollment_tokens_token_id'), 'enrollment_tokens', ['token_id'], unique=True)
    op.create_index('idx_enrollment_issued_by', 'enrollment_tokens', ['issued_by', 'issued_at'], unique=False)
    op.create_index(op.f('ix_enrollment_tokens_alias'), 'enrollment_tokens', ['alias'], unique=False)
    op.create_unique_constraint(None, 'enrollment_tokens', ['token_hash'])
    op.alter_column('password_reset_tokens', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('password_reset_tokens', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('password_reset_tokens', 'used_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_index('idx_password_reset_cleanup', table_name='password_reset_tokens')
    op.drop_index('ix_password_reset_tokens_expires_at', table_name='password_reset_tokens')
    op.drop_index('idx_password_reset_token_lookup', table_name='password_reset_tokens')
    op.create_index('idx_password_reset_token_lookup', 'password_reset_tokens', ['token', 'expires_at'], unique=False)
    op.drop_constraint('password_reset_tokens_user_id_fkey', 'password_reset_tokens', type_='foreignkey')
    op.create_foreign_key(None, 'password_reset_tokens', 'users', ['user_id'], ['id'])
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.drop_index('idx_user_username_active', table_name='users')
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    op.create_unique_constraint(None, 'users', ['username'])
    op.create_unique_constraint(None, 'users', ['email'])
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'is_admin')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_constraint(None, 'users', type_='unique')
    op.create_index('ix_users_username', 'users', ['username'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=False)
    op.create_index('idx_user_username_active', 'users', ['username', 'is_active'], unique=False)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.drop_constraint(None, 'password_reset_tokens', type_='foreignkey')
    op.create_foreign_key('password_reset_tokens_user_id_fkey', 'password_reset_tokens', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index('idx_password_reset_token_lookup', table_name='password_reset_tokens')
    op.create_index('idx_password_reset_token_lookup', 'password_reset_tokens', ['token', 'expires_at', 'used'], unique=False)
    op.create_index('ix_password_reset_tokens_expires_at', 'password_reset_tokens', ['expires_at'], unique=False)
    op.create_index('idx_password_reset_cleanup', 'password_reset_tokens', ['expires_at'], unique=False)
    op.alter_column('password_reset_tokens', 'used_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('password_reset_tokens', 'expires_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('password_reset_tokens', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.drop_constraint(None, 'enrollment_tokens', type_='unique')
    op.drop_index(op.f('ix_enrollment_tokens_alias'), table_name='enrollment_tokens')
    op.drop_index('idx_enrollment_issued_by', table_name='enrollment_tokens')
    op.drop_index(op.f('ix_enrollment_tokens_token_id'), table_name='enrollment_tokens')
    op.create_index('ix_enrollment_tokens_token_id', 'enrollment_tokens', ['token_id'], unique=False)
    op.create_unique_constraint('enrollment_tokens_token_id_key', 'enrollment_tokens', ['token_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('enrollment_tokens', 'used_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('enrollment_tokens', 'expires_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('enrollment_tokens', 'issued_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_column('enrollment_tokens', 'last_used_at')
    op.drop_column('enrollment_tokens', 'scope')
    op.add_column('devices', sa.Column('memory_total_mb', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('devices', sa.Column('network_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('devices', sa.Column('memory_available_mb', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('devices', sa.Column('battery_charging', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('devices', sa.Column('battery_level', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_index('idx_device_status_query', table_name='devices')
    op.create_index('idx_device_status_query', 'devices', ['last_seen', 'battery_level'], unique=False)
    op.create_index('ix_devices_alias', 'devices', ['alias'], unique=False)
    op.create_index('idx_device_monitoring', 'devices', ['monitored_package', 'auto_relaunch_enabled'], unique=False)
    op.alter_column('devices', 'clipboard_updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('devices', 'last_ping_response',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('devices', 'last_ping_sent',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('devices', 'last_status',
               existing_type=sa.Text(),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('devices', 'last_seen',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('devices', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.add_column('device_events', sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.create_foreign_key('device_events_device_id_fkey', 'device_events', 'devices', ['device_id'], ['id'], ondelete='CASCADE')
    op.create_index('ix_device_events_event_type', 'device_events', ['event_type'], unique=False)
    op.create_index('idx_device_event_type_time', 'device_events', ['event_type', 'timestamp'], unique=False)
    op.create_index('idx_device_event_cleanup', 'device_events', ['timestamp'], unique=False)
    op.alter_column('device_events', 'details',
               existing_type=sa.Text(),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('device_events', 'timestamp',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.add_column('commands', sa.Column('fcm_sent_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('commands', sa.Column('fcm_response_body', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('commands', sa.Column('initiated_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('commands', sa.Column('fcm_response_code', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'commands', type_='foreignkey')
    op.create_foreign_key('commands_device_id_fkey', 'commands', 'devices', ['device_id'], ['id'], ondelete='CASCADE')
    op.drop_index('idx_command_status', table_name='commands')
    op.drop_index('idx_command_created', table_name='commands')
    op.create_index('ix_commands_created_at', 'commands', ['created_at'], unique=False)
    op.create_index('idx_command_request_lookup', 'commands', ['request_id'], unique=False)
    op.create_index('idx_command_pending', 'commands', ['status', 'created_at'], unique=False)
    op.create_index('idx_command_device_status', 'commands', ['device_id', 'status', 'created_at'], unique=False)
    op.alter_column('commands', 'completed_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('commands', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('commands', 'result',
               existing_type=sa.Text(),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('commands', 'parameters',
               existing_type=sa.Text(),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.add_column('battery_whitelist', sa.Column('is_system', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('battery_whitelist', sa.Column('display_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.drop_index('idx_whitelist_enabled', table_name='battery_whitelist')
    op.create_index('idx_battery_whitelist_package', 'battery_whitelist', ['package_name'], unique=False)
    op.alter_column('battery_whitelist', 'added_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.drop_column('battery_whitelist', 'enabled')
    op.drop_column('battery_whitelist', 'app_name')
    op.add_column('apk_versions', sa.Column('release_notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('apk_versions', sa.Column('target_sdk', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('apk_versions', sa.Column('file_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=False))
    op.add_column('apk_versions', sa.Column('min_sdk', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint('uq_package_version', 'apk_versions', type_='unique')
    op.drop_index('idx_apk_version_lookup', table_name='apk_versions')
    op.drop_index('idx_apk_build_type', table_name='apk_versions')
    op.create_unique_constraint('uq_apk_version_code', 'apk_versions', ['version_code'], postgresql_nulls_not_distinct=False)
    op.create_index('idx_apk_version_active', 'apk_versions', ['is_active', 'version_code'], unique=False)
    op.alter_column('apk_versions', 'uploaded_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.drop_column('apk_versions', 'storage_url')
    op.drop_column('apk_versions', 'signer_fingerprint')
    op.drop_column('apk_versions', 'git_sha')
    op.drop_column('apk_versions', 'ci_run_id')
    op.drop_column('apk_versions', 'build_type')
    op.drop_column('apk_versions', 'notes')
    op.drop_column('apk_versions', 'package_name')
    op.add_column('apk_installations', sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('apk_installations', sa.Column('requested_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False))
    op.add_column('apk_installations', sa.Column('apk_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('apk_installations', sa.Column('retry_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'apk_installations', type_='foreignkey')
    op.drop_constraint(None, 'apk_installations', type_='foreignkey')
    op.create_foreign_key('apk_installations_apk_id_fkey', 'apk_installations', 'apk_versions', ['apk_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('apk_installations_device_id_fkey', 'apk_installations', 'devices', ['device_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_apk_installations_device_id'), table_name='apk_installations')
    op.drop_index('idx_installation_version_status', table_name='apk_installations')
    op.drop_index('idx_installation_time', table_name='apk_installations')
    op.drop_index('idx_installation_status', table_name='apk_installations')
    op.create_unique_constraint('uq_device_apk', 'apk_installations', ['device_id', 'apk_id'], postgresql_nulls_not_distinct=False)
    op.create_index('idx_apk_installation_status', 'apk_installations', ['status', 'requested_at'], unique=False)
    op.create_index('idx_apk_installation_device', 'apk_installations', ['device_id', 'status'], unique=False)
    op.alter_column('apk_installations', 'completed_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.drop_column('apk_installations', 'initiated_by')
    op.drop_column('apk_installations', 'download_progress')
    op.drop_column('apk_installations', 'initiated_at')
    op.drop_column('apk_installations', 'apk_version_id')
    op.create_table('session_tokens',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('token_jti', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('revoked', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('revoked_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='session_tokens_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='session_tokens_pkey')
    )
    op.create_index('ix_session_tokens_token_jti', 'session_tokens', ['token_jti'], unique=False)
    op.create_index('idx_session_token_lookup', 'session_tokens', ['token_jti', 'revoked'], unique=False)
    op.create_index('idx_session_token_cleanup', 'session_tokens', ['expires_at'], unique=False)
    
    # Drop new tables
    op.drop_table('device_heartbeats')
    op.drop_table('apk_download_events')
    op.drop_table('fcm_dispatches')
    # ### end Alembic commands ###

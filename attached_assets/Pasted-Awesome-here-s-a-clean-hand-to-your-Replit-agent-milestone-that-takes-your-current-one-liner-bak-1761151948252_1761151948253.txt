Awesome‚Äîhere‚Äôs a clean, ‚Äúhand-to-your-Replit-agent‚Äù milestone that takes your current one-liner, bakes in device-owner (DO) handling, and guarantees auto-enrollment with zero user taps.

# Milestone: Zero-Touch NexMDM Enrollment (CMD, Device-Owner, Auto-Enroll)

## Goal

Ship a **single Windows CMD script** (and one-liner variant) that:

1. Installs/updates NexMDM APK,
2. **Enables Device Owner (DO)** when the device is in a factory-fresh state,
3. Applies all optimizations,
4. **Auto-enrolls** into your backend (no QR/manual),
5. Verifies service is running and the device appears in the dashboard‚Äîno on-device actions required.

---

## Scope (what to build)

* **Robust CMD script** (and matching one-liner) that:

  * Waits for ADB device, installs APK with **safe fallback** (uninstall + `-t -d`).
  * **Checks DO state**. If not DO:

    * **Attempt DO provisioning** via `dpm set-device-owner`.
    * If provisioning fails, **print an actionable error** explaining DO requires a factory-reset state and **exit non-zero** (so CI/devs don‚Äôt think it ‚Äúsucceeded‚Äù).
  * Grants runtime/appops permissions, adds Doze whitelist.
  * Applies your **full optimization block** (as in the working script).
  * Launches app and sends **CONFIGURE** broadcast (foreground) with **both** extras (`speedtest_package` and `unity_pkg`) for backward compatibility.
  * Prints broadcast result and enrollment hints if anything fails.
  * Verifies service with `pidof`, prints DO status with `dumpsys device_policy`.

---

## Preconditions

* Device connected via USB with ADB enabled.
* To set DO: device must be **factory-reset / unprovisioned** (no user accounts, setup wizard not completed). We‚Äôll detect this and fail fast with a clear message if not true.
* Package name: `com.nexmdm`.
* Enrollment:

  * Server: `https://83b071bb-c5cb-4eda-b79c-d276873904c2-00-2ha4ytvejclnm.worf.replit.dev`
  * Download URL: `/v1/apk/download/latest`
  * Bearer token: `_sDKZuilFJVWi3NkpQdEjmM07v2-HuGa3teb7bGKMro`
  * Alias: `test`
  * Speedtest package: `org.zwanoo.android.speedtest`

---

## Deliverables

1. **`enroll_nexmdm.cmd`** (robust multi-line CMD, below).
2. **One-liner** variant (same logic compacted).
3. **README.md** (short): usage, prerequisites for DO, common errors, exit codes.

---

## Acceptance Criteria

* **AC1 (Install)**: On a provisioned device, script installs/updates APK without halting.
* **AC2 (DO check)**:

  * If device is **factory-fresh**, script sets DO (verify via `dumpsys device_policy` includes `com.nexmdm`).
  * If device is **not** factory-fresh, script **fails fast** with clear message: ‚ÄúDevice Owner requires a factory-reset device‚Ä¶‚Äù.
* **AC3 (Auto-enroll)**: After run, the app **does not** show QR/manual; it registers and appears in the dashboard within ~60s.
* **AC4 (Optimizations)**: All optimization commands run without terminating the chain.
* **AC5 (Logs & Exit)**: Script prints broadcast result. Non-zero exit on failures; zero on success.

---

## Implementation Notes

* DO detection:

  * `adb shell dumpsys device_policy` ‚Üí look for `Device Owner` and `com.nexmdm`.
  * Also gate on setup state: `adb shell settings get secure user_setup_complete` and `device_provisioned`.
* DO set:

  * `adb shell dpm set-device-owner com.nexmdm/.NexDeviceAdminReceiver`
  * If fails, print: ‚ÄúFactory-reset required for Device Owner. Wipe the device or use QR/NFC provisioning.‚Äù
* Enrollment broadcast:

  * Use `--receiver-foreground` and pass **both** keys:

    * `--es speedtest_package "org.zwanoo.android.speedtest"`
    * `--es unity_pkg "org.zwanoo.android.speedtest"`
* Safe install:

  * First `adb install -r`, if error ‚Üí `pm uninstall -k --user 0 com.nexmdm` then `adb install -t -d`.

---

## Final CMD Script (multi-line, production-ready)

> Save as `enroll_nexmdm.cmd` (no PowerShell‚Äîpure CMD). Adjust `ALIAS` if needed.

```bat
@echo off
setlocal enabledelayedexpansion

REM ====== CONFIG ======
set PKG=com.nexmdm
set ALIAS=test
set SPEEDTEST_PKG=org.zwanoo.android.speedtest
set APK_PATH=%TEMP%\nexmdm-latest.apk
set BASE_URL=https://83b071bb-c5cb-4eda-b79c-d276873904c2-00-2ha4ytvejclnm.worf.replit.dev
set DL_URL=%BASE_URL%/v1/apk/download/latest
set BEARER=_sDKZuilFJVWi3NkpQdEjmM07v2-HuGa3teb7bGKMro

echo [NexMDM Deployment - Device: %ALIAS%]
echo.

echo [Step 0] Waiting for device...
adb wait-for-device || (echo ‚ùå No device found & exit /b 2)

echo [Step 1/7] Downloading latest APK...
echo [DEBUG] URL: %DL_URL%
curl -L -H "Authorization: Bearer %BEARER%" "%DL_URL%" -o "%APK_PATH%" || (echo ‚ùå Download failed & exit /b 3)
if not exist "%APK_PATH%" (echo ‚ùå APK missing at %APK_PATH% & exit /b 3)
echo ‚úÖ APK downloaded!
echo.

echo [Step 2/7] Installing APK (safe update w/ fallback)...
adb install -r "%APK_PATH%"
if errorlevel 1 (
  echo [WARN] Update failed ‚Äî attempting uninstall + clean install...
  adb shell pm uninstall -k --user 0 %PKG% 1>nul 2>nul
  adb install -t -d "%APK_PATH%" || (echo ‚ùå Clean install failed & exit /b 4)
)
echo ‚úÖ APK installed/updated!
echo.

echo [Step 3/7] Ensuring Device Owner (DO)...
for /f "tokens=2 delims=: " %%A in ('adb shell settings get secure device_provisioned') do set DEVPROV=%%A
for /f "tokens=2 delims=: " %%A in ('adb shell settings get secure user_setup_complete') do set USERSETUP=%%A

REM Trim CR/LF
set DEVPROV=%DEVPROV:~0,1%
set USERSETUP=%USERSETUP:~0,1%

adb shell dumpsys device_policy | findstr /C:"Device Owner" /C:"%PKG%" >nul
if errorlevel 1 (
  echo [INFO] Device Owner not detected for %PKG%.
  if "%DEVPROV%"=="1" if "%USERSETUP%"=="1" (
    echo ‚ùå Cannot set Device Owner on a provisioned device.
    echo     Device Owner requires a factory-reset / unprovisioned state.
    echo     Please wipe the device (or use QR/NFC provisioning) and re-run.
    exit /b 5
  )
  adb shell dpm set-device-owner %PKG%/.NexDeviceAdminReceiver 1>nul 2>nul || (
    echo ‚ùå Failed to set Device Owner. Ensure device is factory-fresh and compatible.
    exit /b 6
  )
)

adb shell dumpsys device_policy | findstr /C:"%PKG%" >nul || (
  echo ‚ùå Device Owner verification failed.
  exit /b 7
)
echo ‚úÖ Device Owner confirmed.
echo.

echo [Step 4/7] Permissions & Doze whitelist...
adb shell pm grant %PKG% android.permission.POST_NOTIFICATIONS 2>nul
adb shell pm grant %PKG% android.permission.CAMERA 2>nul
adb shell pm grant %PKG% android.permission.ACCESS_FINE_LOCATION 2>nul
adb shell appops set %PKG% RUN_ANY_IN_BACKGROUND allow 2>nul
adb shell appops set %PKG% AUTO_REVOKE_PERMISSIONS_IF_UNUSED ignore 2>nul
adb shell appops set %PKG% GET_USAGE_STATS allow 2>nul
adb shell dumpsys deviceidle whitelist +%PKG% 1>nul
echo ‚úÖ Whitelisted ^& permissions set!
echo.

echo [Step 5/7] Applying full optimizations and bloat off...
adb shell "settings put global window_animation_scale 0.5; settings put global transition_animation_scale 0.5; settings put global animator_duration_scale 0.5; settings put global ambient_tilt_to_wake 1; settings put global ambient_touch_to_wake 1; settings put global app_standby_enabled 0; settings put global adaptive_battery_management_enabled 0; settings put global app_restriction_enabled false; settings put global dynamic_power_savings_enabled 0; settings put global battery_tip_constants app_restriction_enabled=false; pm disable-user --user 0 com.vzw.hss.myverizon; pm disable-user --user 0 com.vzw.apnlib; pm disable-user --user 0 com.verizon.mips.services; pm disable-user --user 0 com.vcast.mediamanager; pm disable-user --user 0 com.reliancecommunications.vvmclient; pm disable-user --user 0 com.google.android.apps.youtube.music; pm disable-user --user 0 com.google.android.youtube; pm disable-user --user 0 com.king.candycrushsaga; pm disable-user --user 0 com.king.candycrushsodasaga; pm disable-user --user 0 com.superplaystudios.dicedreams; pm disable-user --user 0 net.peakgames.toonblast; pm disable-user --user 0 com.staplegames.dice; pm disable-user --user 0 in.playsimple.tripcross; pm disable-user --user 0 com.easybrain.hidden.spots; pm disable-user --user 0 com.easybrain.sudoku.android; pm disable-user --user 0 com.easybrain.art.puzzle; pm disable-user --user 0 net.peakgames.amy; pm disable-user --user 0 air.com.buffalo_studios.newflashbingo; pm disable-user --user 0 com.tripledot.woodoku; pm disable-user --user 0 com.colorwood.jam; pm disable-user --user 0 com.cardgame.spades.free; pm disable-user --user 0 com.soulcompany.bubbleshooter.relaxing; pm enable com.verizon.dmclientupdate; pm enable com.verizon.obdm; pm enable com.verizon.obdm_permissions; settings put global install_non_market_apps 1"
adb shell dumpsys deviceidle whitelist +%SPEEDTEST_PKG% 1>nul
adb shell appops set %SPEEDTEST_PKG% RUN_ANY_IN_BACKGROUND allow 2>nul
echo ‚úÖ Optimizations applied!
echo.

echo [Step 6/7] Launch and configure...
adb shell monkey -p %PKG% -c android.intent.category.LAUNCHER 1 1>nul 2>nul
timeout /t 2 /nobreak >nul
echo [DEBUG] Sending CONFIGURE broadcast (foreground)‚Ä¶
adb shell am broadcast --receiver-foreground -a %PKG%.CONFIGURE -n %PKG%/.ConfigReceiver --es server_url "%BASE_URL%" --es token "%BEARER%" --es alias "%ALIAS%" --es speedtest_package "%SPEEDTEST_PKG%" --es unity_pkg "%SPEEDTEST_PKG%"
if errorlevel 1 (
  echo ‚ùå CONFIGURE broadcast failed.
  exit /b 8
)
timeout /t 3 /nobreak >nul
echo ‚úÖ Configuration broadcast sent!
echo.

echo [Step 7/7] Verifying service...
adb shell pidof %PKG% 1>nul && (
  echo ‚úÖ Service running
) || (
  echo ‚ùå Service not running
  exit /b 9
)

echo.
echo ==========================================
echo ‚úÖ ENROLLMENT COMPLETE
echo ==========================================
echo üì± "%ALIAS%" should appear in the dashboard within ~60s.
echo.

endlocal
exit /b 0
```

---

## One-Liner (compact, same semantics)

> Paste into CMD as-is. Same behavior (fails fast if DO can‚Äôt be set on a provisioned device).

```
echo [NexMDM Deployment - Device: test] && echo. && set PKG=com.nexmdm && set ALIAS=test && set SPEEDTEST_PKG=org.zwanoo.android.speedtest && set APK_PATH=%TEMP%\nexmdm-latest.apk && set BASE_URL=https://83b071bb-c5cb-4eda-b79c-d276873904c2-00-2ha4ytvejclnm.worf.replit.dev && set DL_URL=%BASE_URL%/v1/apk/download/latest && set BEARER=_sDKZuilFJVWi3NkpQdEjmM07v2-HuGa3teb7bGKMro && echo [Step 0] Waiting for device... && adb wait-for-device || (echo ‚ùå No device found & exit /b 2) && echo [Step 1/7] Downloading latest APK... && curl -L -H "Authorization: Bearer %BEARER%" "%DL_URL%" -o "%APK_PATH%" || (echo ‚ùå Download failed & exit /b 3) && if not exist "%APK_PATH%" (echo ‚ùå APK missing & exit /b 3) && echo ‚úÖ APK downloaded! && echo. && echo [Step 2/7] Installing APK... && (adb install -r "%APK_PATH%" || (echo [WARN] Update failed ‚Äî uninstall+clean install... && adb shell pm uninstall -k --user 0 %PKG% 1>nul 2>nul && adb install -t -d "%APK_PATH%" || (echo ‚ùå Clean install failed & exit /b 4))) && echo ‚úÖ APK installed/updated! && echo. && echo [Step 3/7] Ensuring Device Owner... && for /f "tokens=2 delims=: " %%%%A in ('adb shell settings get secure device_provisioned') do set DEVPROV=%%%%A && for /f "tokens=2 delims=: " %%%%A in ('adb shell settings get secure user_setup_complete') do set USERSETUP=%%%%A && set DEVPROV=%DEVPROV:~0,1% && set USERSETUP=%USERSETUP:~0,1% && (adb shell dumpsys device_policy | findstr /C:"Device Owner" /C:"%PKG%" >nul) || (if "%DEVPROV%"=="1" if "%USERSETUP%"=="1" (echo ‚ùå Cannot set Device Owner on provisioned device. Wipe required. & exit /b 5) & adb shell dpm set-device-owner %PKG%/.NexDeviceAdminReceiver 1>nul 2>nul || (echo ‚ùå Failed to set Device Owner & exit /b 6)) && (adb shell dumpsys device_policy | findstr /C:"%PKG%" >nul) || (echo ‚ùå Device Owner verification failed & exit /b 7) && echo ‚úÖ Device Owner confirmed. && echo. && echo [Step 4/7] Permissions ^& Doze whitelist... && adb shell pm grant %PKG% android.permission.POST_NOTIFICATIONS 2>nul && adb shell pm grant %PKG% android.permission.CAMERA 2>nul && adb shell pm grant %PKG% android.permission.ACCESS_FINE_LOCATION 2>nul && adb shell appops set %PKG% RUN_ANY_IN_BACKGROUND allow 2>nul && adb shell appops set %PKG% AUTO_REVOKE_PERMISSIONS_IF_UNUSED ignore 2>nul && adb shell appops set %PKG% GET_USAGE_STATS allow 2>nul && adb shell dumpsys deviceidle whitelist +%PKG% 1>nul && echo ‚úÖ Whitelisted ^& permissions set! && echo. && echo [Step 5/7] Optimizations... && adb shell "settings put global window_animation_scale 0.5; settings put global transition_animation_scale 0.5; settings put global animator_duration_scale 0.5; settings put global ambient_tilt_to_wake 1; settings put global ambient_touch_to_wake 1; settings put global app_standby_enabled 0; settings put global adaptive_battery_management_enabled 0; settings put global app_restriction_enabled false; settings put global dynamic_power_savings_enabled 0; settings put global battery_tip_constants app_restriction_enabled=false; pm disable-user --user 0 com.vzw.hss.myverizon; pm disable-user --user 0 com.vzw.apnlib; pm disable-user --user 0 com.verizon.mips.services; pm disable-user --user 0 com.vcast.mediamanager; pm disable-user --user 0 com.reliancecommunications.vvmclient; pm disable-user --user 0 com.google.android.apps.youtube.music; pm disable-user --user 0 com.google.android.youtube; pm disable-user --user 0 com.king.candycrushsaga; pm disable-user --user 0 com.king.candycrushsodasaga; pm disable-user --user 0 com.superplaystudios.dicedreams; pm disable-user --user 0 net.peakgames.toonblast; pm disable-user --user 0 com.staplegames.dice; pm disable-user --user 0 in.playsimple.tripcross; pm disable-user --user 0 com.easybrain.hidden.spots; pm disable-user --user 0 com.easybrain.sudoku.android; pm disable-user --user 0 com.easybrain.art.puzzle; pm disable-user --user 0 net.peakgames.amy; pm disable-user --user 0 air.com.buffalo_studios.newflashbingo; pm disable-user --user 0 com.tripledot.woodoku; pm disable-user --user 0 com.colorwood.jam; pm disable-user --user 0 com.cardgame.spades.free; pm disable-user --user 0 com.soulcompany.bubbleshooter.relaxing; pm enable com.verizon.dmclientupdate; pm enable com.verizon.obdm; pm enable com.verizon.obdm_permissions; settings put global install_non_market_apps 1" && adb shell dumpsys deviceidle whitelist +%SPEEDTEST_PKG% 1>nul && adb shell appops set %SPEEDTEST_PKG% RUN_ANY_IN_BACKGROUND allow 2>nul && echo ‚úÖ Optimizations applied! && echo. && echo [Step 6/7] Launch ^& configure... && adb shell monkey -p %PKG% -c android.intent.category.LAUNCHER 1 1>nul 2>nul && timeout /t 2 /nobreak >nul && echo [DEBUG] Sending CONFIGURE broadcast (foreground)‚Ä¶ && adb shell am broadcast --receiver-foreground -a %PKG%.CONFIGURE -n %PKG%/.ConfigReceiver --es server_url "%BASE_URL%" --es token "%BEARER%" --es alias "%ALIAS%" --es speedtest_package "%SPEEDTEST_PKG%" --es unity_pkg "%SPEEDTEST_PKG%" || (echo ‚ùå CONFIGURE broadcast failed & exit /b 8) && timeout /t 3 /nobreak >nul && echo ‚úÖ Configuration broadcast sent! && echo. && echo [Step 7/7] Verifying... && adb shell pidof %PKG% 1>nul && echo ‚úÖ Service running || (echo ‚ùå Service not running & exit /b 9) && echo. && echo ========================================== && echo ‚úÖ ENROLLMENT COMPLETE && echo ========================================== && echo üì± "%ALIAS%" should appear in the dashboard within ~60s. && exit /b 0
```

---

## Risks & Mitigations

* **DO can‚Äôt be set on already-used devices** ‚Üí we detect and fail fast with instructions.
* **APK signature/version mismatches** ‚Üí handled with uninstall + `-t -d`.
* **Receiver permission guard** ‚Üí we run as foreground broadcast; if your receiver requires a custom permission, update the script to include `--receiver-permission <perm>` or expose an Activity‚Äêbased config intent.

---

## Next Up (optional enhancements)

* Add a `--strict` flag to apply the full bloat-disable set, else run a minimal safe set.
* Add a `--alias` param (parse `%1`) for fleet scripting.
* Add a post-enroll ‚Äúping‚Äù intent if your app exposes one to confirm server registration.

If you want this wired into your Replit agent‚Äôs pipeline, I can also provide a tiny checker that verifies `dumpsys device_policy` and returns a structured JSON result for CI gating.
